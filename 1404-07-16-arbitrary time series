{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/SahelKherad/3-story-benchmark-transformer/blob/main/arbitrary%20time%20series\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 61,
      "metadata": {
        "id": "WI4Va3XjlXwJ"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import torch\n",
        "import torch.nn as nn\n",
        "import torch.nn.functional as F\n",
        "from torch.utils.data import Dataset, DataLoader, random_split\n",
        "from sklearn.model_selection import train_test_split\n",
        "import torch.optim as optim"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 62,
      "metadata": {
        "id": "0Gco8healpNp"
      },
      "outputs": [],
      "source": [
        "# win = 5\n",
        "# a = np.arange(1, 80, 2, dtype=np.float32)\n",
        "# print('a =',a)\n",
        "# b = np.arange(0, 80, 2, dtype=np.float32)   # label 1\n",
        "# print('b =',b)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 63,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Se7XgRe4RwVo",
        "outputId": "65c21965-b218-42ad-d8fd-28123b8b3ac6"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0.0000000e+00 1.2500016e-06 2.5000031e-06 ... 9.9999750e-01 9.9999875e-01\n",
            " 1.0000000e+00]\n"
          ]
        }
      ],
      "source": [
        "win = 2048\n",
        "t = np.arange(0, 800000, dtype=np.float32)\n",
        "a = np.sin(0.05*t)                       # class 0\n",
        "b = np.linspace(0, 1, 800000, dtype=np.float32)\n",
        "print(b)\n",
        "# b = np.arange(0, 80000, 2, dtype=np.float32)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 64,
      "metadata": {
        "id": "tVh4-3jSlpoB"
      },
      "outputs": [],
      "source": [
        "# def make_windows(x: np.ndarray, win: int, drop_last: bool = True):\n",
        "#     n = len(x)\n",
        "#     n_full = (n // win) * win\n",
        "#     if drop_last:\n",
        "#         x = x[:n_full]\n",
        "#     else:\n",
        "#         if n % win != 0:\n",
        "#             pad = win - (n % win)\n",
        "#             x = np.pad(x, (0, pad), mode=\"edge\")  # simple edge padding\n",
        "#     windows = x.reshape(-1, win)  # [n_windows, win]\n",
        "#     return windows"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 65,
      "metadata": {
        "id": "nqZDEBIf9mYV"
      },
      "outputs": [],
      "source": [
        "def make_windows(data, frame_length, drop_last : bool = True):\n",
        "    # Calculate how many full frames can be created\n",
        "    num_frames = len(data) // frame_length\n",
        "    # print(num_frames)\n",
        "    # Trim the data to be a perfect multiple of the frame length\n",
        "    trimmed_data = data[:num_frames * frame_length]\n",
        "\n",
        "    # Reshape the data into a 2D array of frames\n",
        "    windows = trimmed_data.reshape((num_frames, frame_length))\n",
        "    # return trimmed_data.shape , frames.shape\n",
        "    return windows"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 66,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "c_Jie5jvobmL",
        "outputId": "11fb21aa-ff7e-4e58-8f7a-1f9fac0b9197"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(390, 2048)\n",
            "(390, 2048)\n"
          ]
        }
      ],
      "source": [
        "# 2) Make windows per class\n",
        "Xa = make_windows(a, win, drop_last=True)\n",
        "# print('Xa = \\n',Xa)\n",
        "print(Xa.shape)\n",
        "Xb = make_windows(b, win, drop_last=True)\n",
        "# print('Xb = \\n', Xb)\n",
        "print(Xb.shape)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 67,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0rrU7cvBtQp_",
        "outputId": "7d1a9528-a521-42ee-b914-7bc73cebe3fa"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(390, 2048)\n",
            "Xb_norm = \n",
            " [[-1.         -0.99902296 -0.9980459  ...  0.99804604  0.9990231\n",
            "   1.        ]\n",
            " [-1.         -0.9990229  -0.998046   ...  0.9980458   0.9990227\n",
            "   1.        ]\n",
            " [-1.         -0.9990231  -0.9980458  ...  0.9980458   0.9990227\n",
            "   1.        ]\n",
            " ...\n",
            " [-1.         -0.99902165 -0.9980433  ...  0.9980433   0.99902165\n",
            "   1.        ]\n",
            " [-1.         -0.99902165 -0.9980433  ...  0.9980433   0.99902165\n",
            "   1.        ]\n",
            " [-1.         -0.9990216  -0.99804324 ...  0.9980432   0.99902165\n",
            "   1.        ]]\n"
          ]
        }
      ],
      "source": [
        "def NormalizeWindow(xa , w =5):\n",
        "    aa = np.zeros_like(xa)  # Initialize an array of the same shape as xa\n",
        "    # totSamples = xa.shape[0] # Number of windows\n",
        "\n",
        "    for i in range(xa.shape[0]):\n",
        "        ak = xa[i, :]  # Select the i-th window\n",
        "        # print(ak)\n",
        "        maxVec = np.max(ak)\n",
        "        # print(maxVec)\n",
        "        minVec = np.min(ak)\n",
        "\n",
        "        # Avoid division by zero if max and min are the same\n",
        "        if maxVec - minVec == 0:\n",
        "            ak_norm = ak - minVec\n",
        "        else:\n",
        "            ak_norm = ((ak - minVec) / (maxVec - minVec) - 0.5) * 2\n",
        "\n",
        "        aa[i, :] = ak_norm # Assign the normalized window back\n",
        "\n",
        "    return aa\n",
        "\n",
        "Xa = NormalizeWindow(Xa, win)\n",
        "# print('Xa_norm = \\n', Xa)\n",
        "print(Xa.shape)\n",
        "\n",
        "# Do the same for Xb\n",
        "Xb = NormalizeWindow(Xb, win)\n",
        "print('Xb_norm = \\n', Xb)\n",
        "# print(Xb.shape)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 68,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iNMzy3s1p0_C",
        "outputId": "1578c019-71fb-4d60-a6bd-cfffb7403f63"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "ya =  (390,)\n",
            "yb =  (390,)\n"
          ]
        }
      ],
      "source": [
        "ya = np.zeros((Xa.shape[0]), dtype=np.int64)\n",
        "print('ya = ',ya.shape)\n",
        "yb = np.ones((Xb.shape[0]),  dtype=np.int64)\n",
        "print('yb = ',yb.shape)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 69,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oAiN9poiqWbt",
        "outputId": "1cc69c8d-61dc-4a61-8b98-08a5dbf5a2a2"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(780, 2048, 1)\n",
            "(780,)\n"
          ]
        }
      ],
      "source": [
        "# 3) Combine, add feature dim, and shuffle the COMBINED set once\n",
        "X = np.concatenate([Xa, Xb], axis=0)[:, :, None]  # [N, 5, 1]\n",
        "print(X.shape)\n",
        "# print(X)\n",
        "y = np.concatenate([ya, yb], axis=0)             # [N]\n",
        "print(y.shape)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 70,
      "metadata": {
        "id": "S4IqqOWjrdvb"
      },
      "outputs": [],
      "source": [
        "# One global shuffle to mix classes well\n",
        "rng = np.random.default_rng(42)\n",
        "perm = rng.permutation(len(y))\n",
        "\n",
        "# print(perm)\n",
        "X = X[perm]\n",
        "y = y[perm]\n",
        "# print(y)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 71,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2KoDJFwwvFeg",
        "outputId": "9ab9703a-59d1-4801-ffb6-5859ababf4e5"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(546, 2048, 1) (234, 2048, 1) (546,) (234,)\n",
            "(117, 2048, 1) (117, 2048, 1) (117,) (117,)\n",
            "test: (117, 2048, 1)\n"
          ]
        }
      ],
      "source": [
        "# 4) Stratified split: 60% train, 20% val, 20% test\n",
        "X_train, X_tmp, y_train, y_tmp = train_test_split(X, y, test_size=0.3, random_state=42, stratify=y)\n",
        "print(X_train.shape, X_tmp.shape, y_train.shape, y_tmp.shape)\n",
        "# print(X_train)\n",
        "# print(y_train)\n",
        "# print('tmp:',X_tmp)\n",
        "X_val, X_test, y_val, y_test = train_test_split(X_tmp, y_tmp, test_size=0.5, random_state=42, stratify=y_tmp)\n",
        "print(X_val.shape, X_test.shape, y_val.shape, y_test.shape)\n",
        "# print(X_val)\n",
        "# print(y_val)\n",
        "print('test:',X_test.shape)\n",
        "# print(y_test.shape)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 72,
      "metadata": {
        "id": "PEItdL-i3BpI"
      },
      "outputs": [],
      "source": [
        "# 5) Torch tensors\n",
        "X_train = torch.from_numpy(X_train).float()  # float32\n",
        "y_train = torch.from_numpy(y_train).long()  # int64\n",
        "X_val   = torch.from_numpy(X_val).float()\n",
        "y_val   = torch.from_numpy(y_val).long()\n",
        "X_test  = torch.from_numpy(X_test).float()\n",
        "y_test  = torch.from_numpy(y_test).long()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# print('train class counts:', torch.bincount(torch.from_numpy(y_train)))\n",
        "# print('val   class counts:', torch.bincount(torch.from_numpy(y_val)))\n",
        "# print('test  class counts:', torch.bincount(torch.from_numpy(y_test)))\n",
        "# assert set(np.unique(y_train)).issubset({0,1})\n"
      ],
      "metadata": {
        "id": "j1EUM0ixtTIT"
      },
      "execution_count": 73,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": 74,
      "metadata": {
        "id": "6BO2wKwQ31Hl"
      },
      "outputs": [],
      "source": [
        "class SeqDataset(Dataset):\n",
        "    def __init__(self, X: torch.Tensor, y: torch.Tensor):\n",
        "        self.X = X  # [N, seq_len, 1]\n",
        "        self.y = y  # [N]\n",
        "    def __len__(self): return self.y.shape[0]\n",
        "    def __getitem__(self, i): return self.X[i], self.y[i]\n",
        "\n",
        "train_ds = SeqDataset(X_train, y_train)\n",
        "# print(X_train.shape)\n",
        "# print(train_ds[0])\n",
        "# print(train_ds[1])\n",
        "# print(train_ds[2])\n",
        "val_ds   = SeqDataset(X_val,   y_val)\n",
        "test_ds  = SeqDataset(X_test,  y_test)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 75,
      "metadata": {
        "id": "trwRTA5l4x07"
      },
      "outputs": [],
      "source": [
        "# 6) DataLoaders: shuffle only the training set\n",
        "batch_size = 512\n",
        "train_loader = DataLoader(train_ds, batch_size=batch_size, shuffle=True)\n",
        "val_loader   = DataLoader(val_ds,   batch_size=batch_size, shuffle=False)\n",
        "test_loader  = DataLoader(test_ds,  batch_size=batch_size, shuffle=False)\n",
        "\n",
        "# tiny = 200\n",
        "# train_loader = DataLoader(SeqDataset(X_train[:tiny], y_train[:tiny]),batch_size=50, shuffle=True)\n",
        "\n",
        "# print('ppp',next(iter(train_loader)))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 76,
      "metadata": {
        "id": "ShARWVtS53s6"
      },
      "outputs": [],
      "source": [
        "# 7) Example: adapt a batch for a Transformer [seq_len, batch, d_model]\n",
        "xb, yb = next(iter(train_loader))   # xb: [B, 5, 1]\n",
        "# xb_t = xb.transpose(0, 1)           # -> [5, B, 1]\n",
        "# print(\"Shapes:\", xb.shape, xb_t.shape, yb.shape)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 77,
      "metadata": {
        "id": "vRC3Gc3HxdTB"
      },
      "outputs": [],
      "source": [
        "class LearnablePositionalEncoding(nn.Module):\n",
        "    \"\"\"\n",
        "    Learnable positional encoding added to token embeddings.\n",
        "    Shape stored: [1, max_len, d_model]\n",
        "    \"\"\"\n",
        "    def __init__(self, d_model: int, max_len: int):\n",
        "        super().__init__()\n",
        "        self.pe = nn.Parameter(torch.zeros(1, max_len, d_model))\n",
        "        print(self.pe)\n",
        "        nn.init.trunc_normal_(self.pe, std=0.02)\n",
        "\n",
        "    def forward(self, x):\n",
        "        # x: [B, T, d_model]\n",
        "        T = x.size(1)\n",
        "        return x + self.pe[:, :T, :]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 78,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "G9CsPkjZuGpY",
        "outputId": "0b5944c3-3733-492b-e43c-6e7936141cae"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Parameter containing:\n",
            "tensor([[[0., 0., 0.],\n",
            "         [0., 0., 0.],\n",
            "         [0., 0., 0.],\n",
            "         [0., 0., 0.],\n",
            "         [0., 0., 0.]]], requires_grad=True)\n"
          ]
        }
      ],
      "source": [
        " pe = LearnablePositionalEncoding(d_model=3, max_len=5)\n",
        "#  print(pe(batch_X[0]))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 79,
      "metadata": {
        "id": "DKX0TzqcgPDR"
      },
      "outputs": [],
      "source": [
        "class TimeSeriesTransformer(nn.Module):\n",
        "    def __init__(self, d_model=64, nhead=2, num_layers=2, d_ff=256, seq_len=5, num_classes=2, dropout=0.1):\n",
        "        super().__init__()\n",
        "        self.inp = nn.Linear(1, d_model)                            # project feature_dim=1 -> d_model\n",
        "        self.pos = LearnablePositionalEncoding(d_model, seq_len)    # learnable PE\n",
        "        enc_layer = nn.TransformerEncoderLayer(\n",
        "            d_model=d_model, nhead=nhead,\n",
        "            dim_feedforward=d_ff, dropout=dropout,\n",
        "            batch_first=True                                        # so we keep [B, T, d]\n",
        "        )\n",
        "        self.encoder = nn.TransformerEncoder(enc_layer, num_layers=num_layers)\n",
        "        self.norm = nn.LayerNorm(d_model)\n",
        "        self.head = nn.Linear(d_model, num_classes)\n",
        "\n",
        "    def forward(self, x):\n",
        "        # x: [B, T, 1]\n",
        "        x = self.inp(x)                  # [B, T, d]\n",
        "        x = self.pos(x)                  # add learnable PE\n",
        "        x = self.encoder(x)              # [B, T, d]\n",
        "        x = self.norm(x)\n",
        "        x = x.mean(dim=1)                # mean pool over time\n",
        "        logits = self.head(x)            # [B, C]\n",
        "        return logits"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 80,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HHfmZcI5RFV3",
        "outputId": "8921d36b-c0d4-4734-a34b-02fb36def57e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Parameter containing:\n",
            "tensor([[[0., 0., 0.,  ..., 0., 0., 0.],\n",
            "         [0., 0., 0.,  ..., 0., 0., 0.],\n",
            "         [0., 0., 0.,  ..., 0., 0., 0.],\n",
            "         ...,\n",
            "         [0., 0., 0.,  ..., 0., 0., 0.],\n",
            "         [0., 0., 0.,  ..., 0., 0., 0.],\n",
            "         [0., 0., 0.,  ..., 0., 0., 0.]]], requires_grad=True)\n"
          ]
        }
      ],
      "source": [
        "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
        "\n",
        "seq_len = X_train.shape[1]\n",
        "num_classes = 2\n",
        "model = TimeSeriesTransformer(d_model=64, nhead=2, num_layers=2, d_ff=256,seq_len=seq_len, num_classes=num_classes).to(device)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 81,
      "metadata": {
        "id": "2XAbr2w1S3bo"
      },
      "outputs": [],
      "source": [
        "# Optional class weights for CE or focal alpha; compute from training labels\n",
        "class_counts = torch.bincount(y_train)\n",
        "class_weights = (class_counts.sum() / (class_counts.float().clamp(min=1)))  # inverse freq\n",
        "class_weights = class_weights / class_weights.sum() * num_classes           # normalize\n",
        "class_weights = class_weights.to(device)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 82,
      "metadata": {
        "id": "UIleqd01Rm4V"
      },
      "outputs": [],
      "source": [
        "optimizer = torch.optim.AdamW(model.parameters(), lr=5e-4, weight_decay=1e-2)\n",
        "loss_fn = nn.CrossEntropyLoss(weight=class_weights)\n",
        "# loss = nn.BCELoss() # BCELoss = no sigmoid built-in\n",
        "# loss = nn.BCEWithLogitsLoss() # BCEWithLogitsLoss = sigmoid built-in"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 83,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "s0_BflvMTrUH",
        "outputId": "119f3fbc-5693-4a8d-bb6b-6ca030d2c479"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/50: Train Loss: 0.7105, Train Accuracy: 0.5147 | Validation Loss: 0.8060, Validation Accuracy: 0.4957\n",
            "\n",
            "Epoch 2/50: Train Loss: 0.7960, Train Accuracy: 0.5000 | Validation Loss: 0.6991, Validation Accuracy: 0.4957\n",
            "\n",
            "Epoch 3/50: Train Loss: 0.6904, Train Accuracy: 0.5440 | Validation Loss: 0.6903, Validation Accuracy: 0.5043\n",
            "\n",
            "Epoch 4/50: Train Loss: 0.6957, Train Accuracy: 0.5000 | Validation Loss: 0.7344, Validation Accuracy: 0.5043\n",
            "\n",
            "Epoch 5/50: Train Loss: 0.7348, Train Accuracy: 0.5000 | Validation Loss: 0.6807, Validation Accuracy: 0.5043\n",
            "\n",
            "Epoch 6/50: Train Loss: 0.6815, Train Accuracy: 0.5000 | Validation Loss: 0.6361, Validation Accuracy: 1.0000\n",
            "\n",
            "Epoch 7/50: Train Loss: 0.6368, Train Accuracy: 0.9744 | Validation Loss: 0.6468, Validation Accuracy: 0.4957\n",
            "\n",
            "Epoch 8/50: Train Loss: 0.6475, Train Accuracy: 0.5000 | Validation Loss: 0.6653, Validation Accuracy: 0.4957\n",
            "\n",
            "Epoch 9/50: Train Loss: 0.6632, Train Accuracy: 0.5000 | Validation Loss: 0.6270, Validation Accuracy: 0.4957\n",
            "\n",
            "Epoch 10/50: Train Loss: 0.6268, Train Accuracy: 0.5092 | Validation Loss: 0.5943, Validation Accuracy: 1.0000\n",
            "\n",
            "Epoch 11/50: Train Loss: 0.5959, Train Accuracy: 1.0000 | Validation Loss: 0.5983, Validation Accuracy: 0.5043\n",
            "\n",
            "Epoch 12/50: Train Loss: 0.6025, Train Accuracy: 0.5000 | Validation Loss: 0.5846, Validation Accuracy: 0.5043\n",
            "\n",
            "Epoch 13/50: Train Loss: 0.5870, Train Accuracy: 0.5165 | Validation Loss: 0.5371, Validation Accuracy: 1.0000\n",
            "\n",
            "Epoch 14/50: Train Loss: 0.5416, Train Accuracy: 1.0000 | Validation Loss: 0.5146, Validation Accuracy: 1.0000\n",
            "\n",
            "Epoch 15/50: Train Loss: 0.5184, Train Accuracy: 1.0000 | Validation Loss: 0.4933, Validation Accuracy: 1.0000\n",
            "\n",
            "Epoch 16/50: Train Loss: 0.4964, Train Accuracy: 1.0000 | Validation Loss: 0.4462, Validation Accuracy: 1.0000\n",
            "\n",
            "Epoch 17/50: Train Loss: 0.4502, Train Accuracy: 1.0000 | Validation Loss: 0.4194, Validation Accuracy: 1.0000\n",
            "\n",
            "Epoch 18/50: Train Loss: 0.4277, Train Accuracy: 1.0000 | Validation Loss: 0.3811, Validation Accuracy: 1.0000\n",
            "\n",
            "Epoch 19/50: Train Loss: 0.3897, Train Accuracy: 1.0000 | Validation Loss: 0.3153, Validation Accuracy: 1.0000\n",
            "\n",
            "Epoch 20/50: Train Loss: 0.3252, Train Accuracy: 1.0000 | Validation Loss: 0.2716, Validation Accuracy: 1.0000\n",
            "\n",
            "Epoch 21/50: Train Loss: 0.2807, Train Accuracy: 1.0000 | Validation Loss: 0.2203, Validation Accuracy: 1.0000\n",
            "\n",
            "Epoch 22/50: Train Loss: 0.2324, Train Accuracy: 1.0000 | Validation Loss: 0.1794, Validation Accuracy: 1.0000\n",
            "\n",
            "Epoch 23/50: Train Loss: 0.1919, Train Accuracy: 1.0000 | Validation Loss: 0.1266, Validation Accuracy: 1.0000\n",
            "\n",
            "Epoch 24/50: Train Loss: 0.1377, Train Accuracy: 1.0000 | Validation Loss: 0.0971, Validation Accuracy: 1.0000\n",
            "\n",
            "Epoch 25/50: Train Loss: 0.1060, Train Accuracy: 1.0000 | Validation Loss: 0.0610, Validation Accuracy: 1.0000\n",
            "\n",
            "Epoch 26/50: Train Loss: 0.0710, Train Accuracy: 1.0000 | Validation Loss: 0.0424, Validation Accuracy: 1.0000\n",
            "\n",
            "Epoch 27/50: Train Loss: 0.0507, Train Accuracy: 1.0000 | Validation Loss: 0.0250, Validation Accuracy: 1.0000\n",
            "\n",
            "Epoch 28/50: Train Loss: 0.0309, Train Accuracy: 1.0000 | Validation Loss: 0.0175, Validation Accuracy: 1.0000\n",
            "\n",
            "Epoch 29/50: Train Loss: 0.0216, Train Accuracy: 1.0000 | Validation Loss: 0.0088, Validation Accuracy: 1.0000\n",
            "\n",
            "Epoch 30/50: Train Loss: 0.0122, Train Accuracy: 1.0000 | Validation Loss: 0.0068, Validation Accuracy: 1.0000\n",
            "\n",
            "Epoch 31/50: Train Loss: 0.0101, Train Accuracy: 1.0000 | Validation Loss: 0.0044, Validation Accuracy: 1.0000\n",
            "\n",
            "Epoch 32/50: Train Loss: 0.0068, Train Accuracy: 1.0000 | Validation Loss: 0.0027, Validation Accuracy: 1.0000\n",
            "\n",
            "Epoch 33/50: Train Loss: 0.0042, Train Accuracy: 1.0000 | Validation Loss: 0.0022, Validation Accuracy: 1.0000\n",
            "\n",
            "Epoch 34/50: Train Loss: 0.0033, Train Accuracy: 1.0000 | Validation Loss: 0.0019, Validation Accuracy: 1.0000\n",
            "\n",
            "Epoch 35/50: Train Loss: 0.0029, Train Accuracy: 1.0000 | Validation Loss: 0.0017, Validation Accuracy: 1.0000\n",
            "\n",
            "Epoch 36/50: Train Loss: 0.0026, Train Accuracy: 1.0000 | Validation Loss: 0.0014, Validation Accuracy: 1.0000\n",
            "\n",
            "Epoch 37/50: Train Loss: 0.0022, Train Accuracy: 1.0000 | Validation Loss: 0.0012, Validation Accuracy: 1.0000\n",
            "\n",
            "Epoch 38/50: Train Loss: 0.0018, Train Accuracy: 1.0000 | Validation Loss: 0.0010, Validation Accuracy: 1.0000\n",
            "\n",
            "Epoch 39/50: Train Loss: 0.0016, Train Accuracy: 1.0000 | Validation Loss: 0.0009, Validation Accuracy: 1.0000\n",
            "\n",
            "Epoch 40/50: Train Loss: 0.0014, Train Accuracy: 1.0000 | Validation Loss: 0.0008, Validation Accuracy: 1.0000\n",
            "\n",
            "Epoch 41/50: Train Loss: 0.0013, Train Accuracy: 1.0000 | Validation Loss: 0.0008, Validation Accuracy: 1.0000\n",
            "\n",
            "Epoch 42/50: Train Loss: 0.0012, Train Accuracy: 1.0000 | Validation Loss: 0.0007, Validation Accuracy: 1.0000\n",
            "\n",
            "Epoch 43/50: Train Loss: 0.0012, Train Accuracy: 1.0000 | Validation Loss: 0.0007, Validation Accuracy: 1.0000\n",
            "\n",
            "Epoch 44/50: Train Loss: 0.0011, Train Accuracy: 1.0000 | Validation Loss: 0.0007, Validation Accuracy: 1.0000\n",
            "\n",
            "Epoch 45/50: Train Loss: 0.0011, Train Accuracy: 1.0000 | Validation Loss: 0.0006, Validation Accuracy: 1.0000\n",
            "\n",
            "Epoch 46/50: Train Loss: 0.0010, Train Accuracy: 1.0000 | Validation Loss: 0.0006, Validation Accuracy: 1.0000\n",
            "\n",
            "Epoch 47/50: Train Loss: 0.0010, Train Accuracy: 1.0000 | Validation Loss: 0.0006, Validation Accuracy: 1.0000\n",
            "\n",
            "Epoch 48/50: Train Loss: 0.0010, Train Accuracy: 1.0000 | Validation Loss: 0.0006, Validation Accuracy: 1.0000\n",
            "\n",
            "Epoch 49/50: Train Loss: 0.0009, Train Accuracy: 1.0000 | Validation Loss: 0.0006, Validation Accuracy: 1.0000\n",
            "\n",
            "Epoch 50/50: Train Loss: 0.0009, Train Accuracy: 1.0000 | Validation Loss: 0.0006, Validation Accuracy: 1.0000\n",
            "\n"
          ]
        }
      ],
      "source": [
        "num_epochs = 50\n",
        "tr_losses = []\n",
        "tr_accs = []\n",
        "val_losses = []\n",
        "val_accs = []\n",
        "for epoch in range(num_epochs):\n",
        "     model.train()\n",
        "     total_loss = 0\n",
        "     total_samples = 0\n",
        "     correct_predictions = 0\n",
        "     for xb, yb in train_loader:\n",
        "        xb , yb = xb.to(device) , yb.to(device).long()\n",
        "        optimizer.zero_grad()\n",
        "        output = model(xb)\n",
        "        # print('output',output)\n",
        "        # print('max',torch.max(output, 1))\n",
        "        # print('yb',yb)\n",
        "\n",
        "        loss = loss_fn(output , yb)\n",
        "        # print('loss',loss)\n",
        "        # optimizer.zero_grad()\n",
        "        loss.backward()\n",
        "        optimizer.step()\n",
        "        total_loss += loss.item() * xb.size(0)\n",
        "        # print(loss.item())\n",
        "        # print(xb.size(0))\n",
        "        # print('total:',total_loss)\n",
        "\n",
        "        # Calculate accuracy\n",
        "        pred = output.argmax(dim=1) # the index of the maximum value for each column\n",
        "        # print('p',predicted)\n",
        "        # print('real',yb)\n",
        "        total_samples += xb.size(0)\n",
        "        # print(total_samples)\n",
        "        correct_predictions += (pred == yb).sum().item()\n",
        "        # print(correct_predictions)\n",
        "\n",
        "     epoch_loss = total_loss / total_samples\n",
        "     epoch_accuracy = correct_predictions / total_samples\n",
        "     tr_losses.append(epoch_loss)\n",
        "     tr_accs.append(epoch_accuracy)\n",
        "\n",
        "    #  print(f\"Epoch {epoch+1}/{num_epochs}: \" f\"Train Loss: {epoch_loss:.4f}, \"f\"Train Accuracy: {epoch_accuracy:.4f}\")\n",
        "\n",
        "     model.eval()\n",
        "     val_correct_predictions = 0\n",
        "     val_total_samples = 0\n",
        "     val_total_loss = 0\n",
        "     with torch.no_grad():\n",
        "          for xb, yb in val_loader:\n",
        "              xb, yb = xb.to(device), yb.to(device).long()\n",
        "              output = model(xb)\n",
        "              val_loss = loss_fn(output,yb)\n",
        "              val_total_loss += val_loss.item() * xb.size(0)\n",
        "              pred = output.argmax(dim=1)\n",
        "              val_total_samples += xb.size(0)\n",
        "              val_correct_predictions += (pred == yb).sum().item()\n",
        "\n",
        "     val_epoch_loss = val_total_loss / val_total_samples\n",
        "     val_epoch_accuracy = val_correct_predictions / val_total_samples\n",
        "    #  print(    f\"Validation Loss: {val_epoch_loss:.4f}, \"f\"Validation Accuracy: {val_epoch_accuracy:.4f}\\n\")\n",
        "     val_losses.append(val_epoch_loss)\n",
        "     val_accs.append(val_epoch_accuracy)\n",
        "     print(f\"Epoch {epoch+1}/{num_epochs}: \" f\"Train Loss: {epoch_loss:.4f}, \"f\"Train Accuracy: {epoch_accuracy:.4f} | \"f\"Validation Loss: {val_epoch_loss:.4f}, \"f\"Validation Accuracy: {val_epoch_accuracy:.4f}\\n\")\n",
        "\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import torch.nn.functional as F\n",
        "val_probs = []\n",
        "val_true  = []\n",
        "with torch.no_grad():\n",
        "    for xb, yb in val_loader:\n",
        "        out = model(xb.to(device))\n",
        "        val_probs.append(F.softmax(out, dim=1).max(1).values.cpu())\n",
        "        val_true.append(yb)\n",
        "val_probs = torch.cat(val_probs)\n",
        "print('Val avg max-softmax:', val_probs.mean().item())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8jMTdw52uDAX",
        "outputId": "f0d0e6a5-d48b-4fec-ca8b-aab2d808604a"
      },
      "execution_count": 84,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Val avg max-softmax: 0.9994326829910278\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model.eval()\n",
        "import torch.nn.functional as F\n",
        "probs = []\n",
        "with torch.no_grad():\n",
        "    for xb, yb in val_loader:\n",
        "        out = model(xb.to(device))\n",
        "        p = F.softmax(out, dim=1).max(dim=1).values\n",
        "        probs.append(p.cpu())\n",
        "probs = torch.cat(probs)\n",
        "print(\"Val avg max softmax:\", probs.mean().item())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VSXkx-HYlB1k",
        "outputId": "938c175c-78e9-4388-f1e4-2a2cb7ca03bd"
      },
      "execution_count": 85,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Val avg max softmax: 0.9994326829910278\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 86,
      "metadata": {
        "id": "Xohv7SFb4gK8",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3a489b25-0cf5-4f9f-b31a-8d6bd749d4fe"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Test Loss: 0.0006, Test Acc: 1.0000\n"
          ]
        }
      ],
      "source": [
        "# =========================\n",
        "# Test evaluation (add this)\n",
        "# =========================\n",
        "model.eval()\n",
        "test_correct = 0\n",
        "test_total = 0\n",
        "test_loss_total = 0.0\n",
        "with torch.no_grad():\n",
        "    for xb, yb in test_loader:\n",
        "        xb, yb = xb.to(device), yb.to(device).long()\n",
        "        out = model(xb)\n",
        "        loss = loss_fn(out, yb)\n",
        "        test_loss_total += loss.item() * xb.size(0)\n",
        "        pred = out.argmax(dim=1)\n",
        "        test_correct += (pred == yb).sum().item()\n",
        "        test_total += xb.size(0)\n",
        "\n",
        "print(f\"Test Loss: {test_loss_total/test_total:.4f}, Test Acc: {test_correct/test_total:.4f}\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 87,
      "metadata": {
        "id": "QccAjtUR4f_q",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e9c98834-5405-40f4-b40a-732eb074caaa"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[58  0]\n",
            " [ 0 59]]\n"
          ]
        }
      ],
      "source": [
        "from sklearn.metrics import confusion_matrix\n",
        "import numpy as np\n",
        "all_pred, all_true = [], []\n",
        "with torch.no_grad():\n",
        "    for xb, yb in val_loader:\n",
        "        out = model(xb.to(device))\n",
        "        all_pred.append(out.argmax(1).cpu().numpy())\n",
        "        all_true.append(yb.numpy())\n",
        "cm = confusion_matrix(np.concatenate(all_true), np.concatenate(all_pred))\n",
        "print(cm)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 87,
      "metadata": {
        "id": "afA73SCV4f5_"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": 87,
      "metadata": {
        "id": "WUToogw34fzs"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": 88,
      "metadata": {
        "id": "-qzzYlKo5xfL",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 449
        },
        "outputId": "f53886b3-9faf-4e14-b8f8-4fe3ff9a71b9"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "epoch = np.arange(0,num_epochs , 1)\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "plt.plot(epoch, tr_losses , label=\"Train_loss\")\n",
        "plt.plot(epoch, val_losses, label=\"val_losss\")\n",
        "plt.xlabel(\"Epoch\")\n",
        "plt.ylabel(\"Loss\")\n",
        "plt.legend()\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 89,
      "metadata": {
        "id": "ino_bVP5sBx5",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "ad7b403e-0bc3-421c-fdd4-3899db04a3a4"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "import torch\n",
        "import torch.nn.functional as F\n",
        "from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\n",
        "from sklearn.metrics import RocCurveDisplay, PrecisionRecallDisplay\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "y_true, y_pred, y_score = [], [], []\n",
        "model.eval()\n",
        "\n",
        "with torch.no_grad():\n",
        "    for xb, yb in val_loader:\n",
        "        xb, yb = xb.to(device), yb.to(device).long()   # targets should be int for CE\n",
        "        logits = model(xb)                             # [B,2]\n",
        "\n",
        "        # 1) Probability of class 1\n",
        "        probs  = torch.softmax(logits, dim=1)          # [B,2]\n",
        "        score1 = probs[:, 1]                           # [B]\n",
        "\n",
        "        # 2) Predicted class index\n",
        "        preds  = logits.argmax(dim=1)                  # [B]\n",
        "\n",
        "        # Save results\n",
        "        y_true.extend(yb.cpu().tolist())\n",
        "        y_pred.extend(preds.cpu().tolist())\n",
        "        y_score.extend(score1.cpu().tolist())\n",
        "\n",
        "# 1) Confusion Matrix\n",
        "ConfusionMatrixDisplay.from_predictions(y_true, y_pred, cmap=\"Blues\", values_format=\"d\")\n",
        "plt.title(\"Confusion Matrix (Validation)\")\n",
        "plt.show()\n",
        "\n",
        "# 2) ROC\n",
        "RocCurveDisplay.from_predictions(y_true, y_score)\n",
        "plt.title(\"ROC Curve (Validation)\")\n",
        "plt.show()\n",
        "\n",
        "# 3) Precision–Recall\n",
        "PrecisionRecallDisplay.from_predictions(y_true, y_score)\n",
        "plt.title(\"Precision–Recall Curve (Validation)\")\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 90,
      "metadata": {
        "id": "a9rUl-yzt5ZU",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 545
        },
        "outputId": "fb7cffac-d3d1-4215-e7ea-a4b1e7ac2c2d"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x600 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "from sklearn.manifold import TSNE\n",
        "import matplotlib.pyplot as plt\n",
        "import torch\n",
        "\n",
        "model.eval()\n",
        "all_embeds, all_labels = [], []\n",
        "\n",
        "with torch.no_grad():\n",
        "    for xb, yb in val_loader:\n",
        "        xb = xb.to(device)\n",
        "        # Pass through encoder only (skip classifier head)\n",
        "        embeds = model.encoder(model.inp(xb) + model.pos(model.inp(xb)))\n",
        "        embeds = embeds.mean(dim=1)                # [B, d_model]\n",
        "\n",
        "        all_embeds.append(embeds.cpu())\n",
        "        all_labels.append(yb.cpu())\n",
        "\n",
        "# Concatenate all batches\n",
        "all_embeds = torch.cat(all_embeds, dim=0).numpy()\n",
        "all_labels = torch.cat(all_labels, dim=0).numpy()\n",
        "\n",
        "# Run t-SNE\n",
        "X_2d = TSNE(n_components=2, random_state=42).fit_transform(all_embeds)\n",
        "\n",
        "# Plot\n",
        "plt.figure(figsize=(6,6))\n",
        "plt.scatter(X_2d[:,0], X_2d[:,1], c=all_labels, cmap=\"coolwarm\", alpha=0.7)\n",
        "plt.colorbar(label=\"Class\")\n",
        "plt.title(\"t-SNE of Validation Embeddings\")\n",
        "plt.show()\n"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMpmJ6a2O0oABJByFqr0+Vh",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
